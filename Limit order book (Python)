#importing libraries
import numpy as np
import pandas as pd
import matplotlib as plt
#setting seed for default number generator
rng = np.random.default_rng(seed = 42)

     

## Function to delete 0 from the beginning of the list if there is any 
#(so if there is 0 it ads to counter 1 and after going through all slices a list from [counter:] 
def price_time_policy(order_list):
    counter=0
    for order in order_list:
        if order==0:
            counter+=1
        else:
            break
    order_list_changed=order_list[counter:]
    return order_list_changed


##Function to sort dictionary
def sorted_dict (LOB): 
   
    dic_1=LOB.get('sells')
    dict_1={}
    #it sorts dictionary inside Sells key by keys and  assigns to another dictionary which appears sorted
    for k,v in sorted(dic_1.items()):
        dict_1[k]=v
    dic_2=LOB.get('buys')
    dict_2={}
    
     #it sorts dictionary inside Buys key by keys and  assigns to another dictionary which appears sorted
    for k,v in sorted(dic_2.items()):
        dict_2[k]=v
    LOB={'sells':dict_1, 'buys':dict_2}
    return LOB
     



# initial_lob={'sells': {12: [21,  6,  3, 16, 29, 22, 23, 21, 23, 15], 13: [21,  6,  3, 16, 29, 22, 23, 21, 23, 15]}, 'buys': {10: [ 1, 23, 19, 13, 13, 25,  3], 11:[20,3,9,6]}}
initial_lob={'sells':{12:[5,6]}, 'buys':{10:[29,78]}}




# Sorting dictionary to follow price-time priority
initial_lob=sorted_dict(initial_lob)

# Asking customer to state his/her intention
x=input('Are you willing to buy or sell? B for buy, S for sell, X for stop')

# If customer types X, code will break 
while x!='X':
    # If customer wants to sell
    if x=='B':
        #Getting dictionary with price/quantity for sells 
        dic_1=initial_lob.get('sells')
        # to simplify we state that stocks' price and quantity should be in integer type,
        #we could use real/float numbers too, but to show how algorithm works I think it is better to put integers 
        try:
            price=int(input(f'At what price you are willing to buy? Note there are {sum(list(dic_1.values())[0])} Quantity available and the best price available is {list(dic_1.keys())[0]}! '))
            quantity=int(input(f'What Quantity you would like to buy? NOTE there are {sum(list(dic_1.values())[0])} available for the best price '))
        # In case if customer types not numbers it asks if they want to exit or continue   
        except:
            print('it should be integer')
            esc=input(' Esc - X | Continue - Any key')
            if esc=='X':
                print("SEE YOU LATER")
                break
            else:
                continue

        
        # That logic from questions 5,4,3. We could use functions instead, but again to show how algorithm works I decided to leave everything
        # Since our dictionary is sorted, beat prices woild be on the top, because of price-time policy, and it is enough to compare with first price in a dictionary
        
        # I choosed to inform customer that there is a better price if he/she potentially could lose money
        if list(dic_1.keys())[0]<price:
            print(f'The lowest price available is {list(dic_1.keys())[0]}! There is no need of overpaying') 
            continue
        if quantity>sum(list(dic_1.values())[0]):
            print(f'The max quantity available for the price {list(dic_1.keys())[0]}  is {list(dic_1.keys())[0]}! Try to type equal or less number') 
            continue
            
        # if they set equal price then there should be calculation like how much quantity stock are available - quantity ordered
        #So this is a market order
        if list(dic_1.keys())[0]==price:
           
        # logic from Question 5
            order_list=list(dic_1.values())[0]
        #we go over all elements of buys queue
            for order in range(len(order_list)):
                #substract order quantity from tupple from first element in buys queue
                quantity_sold=order_list[order]-quantity
                #if difference <0 that means there is some leftover number it will pass to the next iteration, whereas we turn element in a list to 0
                if quantity_sold<0:
                    order_list[order]=0
                    #(making it positive number to substract it in next iteration)
                    quantity=-1*quantity_sold
                    continue  

                # if difference >0 that means that we assign that difference as a value for pos of  iteration number    
                if quantity_sold>0:
                    order_list[order]=quantity_sold
                    break

                # if difference =0 then that element also equals 0
                else:
                    order_list[order]=0
                    break
            # then we are passing changed order list to price_time_policy function to delete 0 if there is any
            order_list=price_time_policy(order_list)
            dic_1[list(dic_1.keys())[0]]=order_list

            
                #assign it to the dictionary's 'buys' key's value 
            initial_lob['sells']=dic_1 
                    

        else:
            # so if the price is lower than the best price available - that order is limit order
            
            # we take a dictionary with prices and quantity
            dic_2=initial_lob.get('buys')
            dic_3={}
            # LOOP THROUGH ELEMENTS OF THE DICTIONARY
            for k,v in dic_2.items():
                # IF WE HAVE THE SAME PRICE IN THIS DICTIONARY KEYS WE APPEND OUR QUANTITY TO THE LIST BECAUSE OF PRICE-TIME POLICY
                if k==price:
                    order_list=dic_2.get(k)
                    order_list=np.append(order_list,quantity)
                    dic_3[price]=order_list
                # IF THERE IS NO SAME PRICE WE CREATE NEW KEY WITH PRICE AND QUANTITY
                elif k!=price:
                    dic_3=dic_2
                    dic_3[price]=[quantity]
                    break
            initial_lob['buys']=dic_3
        #THEN OFC WE SORT OUR DICTIONARY AGAIN IF WE HAVE ANY ADDED PRICES:QUANTITIES TO THE DICTIONARY    
        initial_lob=sorted_dict(initial_lob)        
        #PRINTING UPDATED ORDER BOOK
        print(initial_lob)
        break
        
        
## THE SAME LOGIC AS WITH 'B', THE ONLY DIFFERENCE WE WORK WITH DIFFERENT KEYS
## will not comment it line by line

    if x=='S':
        dic_1=initial_lob.get('buys')
        try:
            price=int(input(f'At what price are you willing to sell? Note there are {sum(list(dic_1.values())[0])} Quantity available and the best price available is {list(dic_1.keys())[0]}! '))
            quantity=int(input(f'What Quantity you would like to buy? NOTE there are {sum(list(dic_1.values())[0])} available for the best price '))
            
        except:
            print('it should be integer')
            esc=input(' Esc - X | Continue - Any key')
            if esc=='X':
                print("SEE YOU LATER")
                break
            else:
                continue

        
                # I choosed to inform customer that there is a better price if he/she potentially could lose money
        if list(dic_1.keys())[0]>price:
            print(f'The highest price available is {list(dic_1.keys())[0]}! There is no need of losing money')
            continue
        if quantity>sum(list(dic_1.values())[0]):
            print(f'The max quantity available for the price {list(dic_1.keys())[0]}  is {list(dic_1.keys())[0]}! Try to type equal or less number') 
            continue
            
        if list(dic_1.keys())[0]==price:
       
            order_list=list(dic_1.values())[0]
        #we go over all elements of buys queue
            for order in range(len(order_list)):
                #substract order quantity from tupple from first element in buys queue
                quantity_sold=order_list[order]-quantity
                #if difference <0 that means there is some leftover number it will pass to the next iteration, whereas we turn element in a list to 0
                if quantity_sold<0:
                    order_list[order]=0
                    #(making it positive number to substract it in next iteration)
                    quantity=-1*quantity_sold
                    continue  

                # if difference >0 that means that we assign that difference as a value for pos of  iteration number    
                if quantity_sold>0:
                    order_list[order]=quantity_sold
                    break

                # if difference =0 then that element also equals 0
                else:
                    order_list[order]=0
                    break
            # then we are passing changed order list to price_time_policy function to delete 0 if there is any
            order_list=price_time_policy(order_list)
            dic_1[list(dic_1.keys())[0]]=order_list

            
                #assign it to the dictionary's 'buys' key's value 
            initial_lob['buys']=dic_1 
                    
    
        else:

            dic_2=initial_lob.get('sells')
            dic_3={}
            for k,v in dic_2.items():
                if k==price:
                    order_list=dic_2.get(k)
                    order_list=np.append(order_list,quantity)
                    dic_3[price]=order_list
                
                elif k!=price:
                    dic_3=dic_2
                    dic_3[price]=[quantity]
                    break
            initial_lob['sells']=dic_3
            
        initial_lob=sorted_dict(initial_lob)        
                    


            
        print(initial_lob)
        break

# if customer typed something besides 'X', 'B', 'S'
    else:
        print('You entered wrong answer')
        x=input('Are you willing to buy or sell? B for buy, S for sell, X for stop')
